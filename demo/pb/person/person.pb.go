// 声明语法版本 告诉编译器 用proto3 来解读

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: person/person.proto

// 这个package不是给golang用的包 而是给proto分包用的包

package person

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 枚举
// 定义枚举类型
type Home_SEX int32

const (
	Home_MAN   Home_SEX = 0 // 男   枚举类型一定要有一个0值
	Home_WOMAN Home_SEX = 1 // 女
	Home_OTHER Home_SEX = 2 // 未知
	// 有些时候 枚举出现相同的值  这时候生成文件 失败报错：
	// "person.Home.GIRL" uses the same enum value as "person.Home.WOMAN". If this is intended, set 'option allow_alias = true;' to the enum definition.
	// 设置  option allow_alias = true; 就可以正常生成
	Home_GIRL Home_SEX = 1 // 也是女
)

// Enum value maps for Home_SEX.
var (
	Home_SEX_name = map[int32]string{
		0: "MAN",
		1: "WOMAN",
		2: "OTHER",
		// Duplicate value: 1: "GIRL",
	}
	Home_SEX_value = map[string]int32{
		"MAN":   0,
		"WOMAN": 1,
		"OTHER": 2,
		"GIRL":  1,
	}
)

func (x Home_SEX) Enum() *Home_SEX {
	p := new(Home_SEX)
	*p = x
	return p
}

func (x Home_SEX) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Home_SEX) Descriptor() protoreflect.EnumDescriptor {
	return file_person_person_proto_enumTypes[0].Descriptor()
}

func (Home_SEX) Type() protoreflect.EnumType {
	return &file_person_person_proto_enumTypes[0]
}

func (x Home_SEX) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Home_SEX.Descriptor instead.
func (Home_SEX) EnumDescriptor() ([]byte, []int) {
	return file_person_person_proto_rawDescGZIP(), []int{1, 0}
}

// 定义结构
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型 key(下划线)=唯一(标识)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"` //    bool  sex = 3;
	// 切片
	Test []string `protobuf:"bytes,4,rep,name=test,proto3" json:"test,omitempty"` // 声明一个string类型的切片
	// map 第一个参数是key 只能使用 int 或 string 第二个参数是value 类型想用啥用啥
	TestMap   map[string]string  `protobuf:"bytes,5,rep,name=test_map,json=testMap,proto3" json:"test_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // map[string]string
	MapPerson map[string]*Person `protobuf:"bytes,6,rep,name=map_person,json=mapPerson,proto3" json:"map_person,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[string]Person
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_person_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_person_person_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_person_person_proto_rawDescGZIP(), []int{0}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Person) GetTest() []string {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *Person) GetTestMap() map[string]string {
	if x != nil {
		return x.TestMap
	}
	return nil
}

func (x *Person) GetMapPerson() map[string]*Person {
	if x != nil {
		return x.MapPerson
	}
	return nil
}

// 类型嵌套
type Home struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  Home 中存在很多的 Person
	//  []Person
	Persons []*Person `protobuf:"bytes,1,rep,name=persons,proto3" json:"persons,omitempty"`
	// 定义了结构一定要使用
	ViewUser *Home_ViewUser `protobuf:"bytes,2,opt,name=view_user,json=viewUser,proto3" json:"view_user,omitempty"`
	// 使用枚举类型
	Sex Home_SEX `protobuf:"varint,3,opt,name=sex,proto3,enum=person.Home_SEX" json:"sex,omitempty"`
	// 实际上就是声明了一个区间
	// 区间里边声明了多个属性
	// 但是多个属性只有一个可以有值 【只要一个有值其他的都会被清空掉】所以不可能声明成数组
	// 具体使用方法 见main.go
	//
	// Types that are assignable to TestOneOf:
	//	*Home_One
	//	*Home_Two
	//	*Home_Three
	TestOneOf isHome_TestOneOf `protobuf_oneof:"TestOneOf"`
}

func (x *Home) Reset() {
	*x = Home{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_person_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Home) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Home) ProtoMessage() {}

func (x *Home) ProtoReflect() protoreflect.Message {
	mi := &file_person_person_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Home.ProtoReflect.Descriptor instead.
func (*Home) Descriptor() ([]byte, []int) {
	return file_person_person_proto_rawDescGZIP(), []int{1}
}

func (x *Home) GetPersons() []*Person {
	if x != nil {
		return x.Persons
	}
	return nil
}

func (x *Home) GetViewUser() *Home_ViewUser {
	if x != nil {
		return x.ViewUser
	}
	return nil
}

func (x *Home) GetSex() Home_SEX {
	if x != nil {
		return x.Sex
	}
	return Home_MAN
}

func (m *Home) GetTestOneOf() isHome_TestOneOf {
	if m != nil {
		return m.TestOneOf
	}
	return nil
}

func (x *Home) GetOne() string {
	if x, ok := x.GetTestOneOf().(*Home_One); ok {
		return x.One
	}
	return ""
}

func (x *Home) GetTwo() string {
	if x, ok := x.GetTestOneOf().(*Home_Two); ok {
		return x.Two
	}
	return ""
}

func (x *Home) GetThree() string {
	if x, ok := x.GetTestOneOf().(*Home_Three); ok {
		return x.Three
	}
	return ""
}

type isHome_TestOneOf interface {
	isHome_TestOneOf()
}

type Home_One struct {
	One string `protobuf:"bytes,6,opt,name=one,proto3,oneof"`
}

type Home_Two struct {
	Two string `protobuf:"bytes,7,opt,name=two,proto3,oneof"`
}

type Home_Three struct {
	Three string `protobuf:"bytes,8,opt,name=three,proto3,oneof"`
}

func (*Home_One) isHome_TestOneOf() {}

func (*Home_Two) isHome_TestOneOf() {}

func (*Home_Three) isHome_TestOneOf() {}

// 还可以嵌套 message
type Home_ViewUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Home_ViewUser) Reset() {
	*x = Home_ViewUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_person_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Home_ViewUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Home_ViewUser) ProtoMessage() {}

func (x *Home_ViewUser) ProtoReflect() protoreflect.Message {
	mi := &file_person_person_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Home_ViewUser.ProtoReflect.Descriptor instead.
func (*Home_ViewUser) Descriptor() ([]byte, []int) {
	return file_person_person_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Home_ViewUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_person_person_proto protoreflect.FileDescriptor

var file_person_person_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0xc2, 0x02,
	0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x61,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x4d,
	0x61, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d,
	0x61, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbc, 0x02, 0x0a, 0x04, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x08, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x03, 0x73, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x48, 0x6f, 0x6d, 0x65, 0x2e, 0x53, 0x45, 0x58, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x03, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x74, 0x77, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65, 0x1a, 0x1e, 0x0a,
	0x08, 0x56, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a,
	0x03, 0x53, 0x45, 0x58, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x57, 0x4f, 0x4d, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x49, 0x52, 0x4c, 0x10, 0x01, 0x1a, 0x02, 0x10,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x4a, 0x04,
	0x08, 0x09, 0x10, 0x0a, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x42, 0x17, 0x5a, 0x15, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x3b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_person_person_proto_rawDescOnce sync.Once
	file_person_person_proto_rawDescData = file_person_person_proto_rawDesc
)

func file_person_person_proto_rawDescGZIP() []byte {
	file_person_person_proto_rawDescOnce.Do(func() {
		file_person_person_proto_rawDescData = protoimpl.X.CompressGZIP(file_person_person_proto_rawDescData)
	})
	return file_person_person_proto_rawDescData
}

var file_person_person_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_person_person_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_person_person_proto_goTypes = []interface{}{
	(Home_SEX)(0),         // 0: person.Home.SEX
	(*Person)(nil),        // 1: person.Person
	(*Home)(nil),          // 2: person.Home
	nil,                   // 3: person.Person.TestMapEntry
	nil,                   // 4: person.Person.MapPersonEntry
	(*Home_ViewUser)(nil), // 5: person.Home.ViewUser
}
var file_person_person_proto_depIdxs = []int32{
	3, // 0: person.Person.test_map:type_name -> person.Person.TestMapEntry
	4, // 1: person.Person.map_person:type_name -> person.Person.MapPersonEntry
	1, // 2: person.Home.persons:type_name -> person.Person
	5, // 3: person.Home.view_user:type_name -> person.Home.ViewUser
	0, // 4: person.Home.sex:type_name -> person.Home.SEX
	1, // 5: person.Person.MapPersonEntry.value:type_name -> person.Person
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_person_person_proto_init() }
func file_person_person_proto_init() {
	if File_person_person_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_person_person_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_person_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Home); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_person_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Home_ViewUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_person_person_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Home_One)(nil),
		(*Home_Two)(nil),
		(*Home_Three)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_person_person_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_person_person_proto_goTypes,
		DependencyIndexes: file_person_person_proto_depIdxs,
		EnumInfos:         file_person_person_proto_enumTypes,
		MessageInfos:      file_person_person_proto_msgTypes,
	}.Build()
	File_person_person_proto = out.File
	file_person_person_proto_rawDesc = nil
	file_person_person_proto_goTypes = nil
	file_person_person_proto_depIdxs = nil
}
